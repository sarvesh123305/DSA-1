/*
Traversing a tree in O(1) space 

Approach
1)Make a pointer which points to current node
2)Continue steps above till the current node pointer is not null
3)If the left of the pointer is NULL , then print element and move to right.
4)If left pointer is not null , Find (inorder predecessor) 
	While finding inorder predecessor just make sure you handle 2 things
	1)If inorderpredecessor -> right is NULL then just make temp link and move current to its one left .Also print the current element
	2)If while finding inorderpredecessor we get its right as current , then make inorderpredecessor -> right = NULL and move current to its one right
	i.e in short in 1) we create temp link
			2) we delete that created temp link
		
*/

void morrisTraversalPreOrder(Tree tnode)    //How?
{
    Tree curr = tnode;
    while(curr != NULL){
        if(curr -> left == NULL){
            printf("%d ",curr -> data);
          
            curr = curr -> right;
        }
        else{
            Tree prev = curr -> left;
            while( prev -> right && prev -> right != curr){
                prev = prev -> right;
            } 

            if(prev -> right == NULL){
                prev -> right = curr;
                curr = curr -> left;
            }
            else{
                prev -> right = NULL;
                printf("%d ",curr -> data);
                curr = curr -> right;
            }
        }
    }

    return;
}
